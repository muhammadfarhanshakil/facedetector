def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.facedetector"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

       buildTypes {
       release {
            minifyEnabled true   
            shrinkResources true   
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' 
            signingConfig signingConfigs.debug
              aaptOptions {
                ignoreAssetsPattern '!mlkit_pose:!mlkit_label_default_model:'
            }
            aaptOptions {
               ignoreAssetsPattern '!mlkit_pose:!mlkit_label_default_model:!hobbes.tflite:'
            }
       }
   }



     packagingOptions {
         
		exclude 'lib/**/libtranslate_jni.so'
		exclude 'lib/**/libdigitalink.so'
		exclude 'lib/**/libxeno_native.so'
		exclude 'lib/**/libmlkitcommonpipeline.so'
		exclude 'lib/**/libbarhopper_v2.so'
		exclude 'lib/**/libclassifier_jni.so'
		exclude 'lib/**/libpredictor_jni.so'
		exclude 'lib/**/libtextclassifier3_jni_tclib.so'
	    // exclude 'lib/**/libface_detector_v2_jni.so'
		exclude 'lib/**/libtensorflowlite_jni.so'
		exclude 'lib/**/liblanguage_id_jni.so'
	}
}

flutter {
    source '../..'
}
